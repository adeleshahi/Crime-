{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fee67727",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import Packages\n",
    "import pandas as pd \n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "46160797",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original shape of data: 19782 17\n"
     ]
    }
   ],
   "source": [
    "# Import original data\n",
    "data = pd.read_excel('PCA.xlsx')\n",
    "print('Original shape of data:', data.shape[0], data.shape[1])\n",
    "\n",
    "# Convert Categorical Features to Numerical\n",
    "onehot_encoder = OneHotEncoder(sparse=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2416ca6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape OFFENSE_DESCRIPTION after converting: 19782 130\n"
     ]
    }
   ],
   "source": [
    "# Convert feature OFFENSE_DESCRIPTION to Numerical features\n",
    "Off_Descript = data.loc[:, 'OFFENSE_DESCRIPTION']\n",
    "Off_Descript = Off_Descript.values.reshape(len(Off_Descript), 1)\n",
    "Y1 = pd.DataFrame(onehot_encoder.fit_transform(Off_Descript))\n",
    "print('Shape OFFENSE_DESCRIPTION after converting:', Y1.shape[0], Y1.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dffda07e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape DISTRICT after converting: 19782 14\n"
     ]
    }
   ],
   "source": [
    "# Convert feature DISTRICT to Numerical features\n",
    "District = data.loc[:, 'DISTRICT']\n",
    "District = District.values.reshape(len(District), 1)\n",
    "Y2 = pd.DataFrame(onehot_encoder.fit_transform(District))\n",
    "print('Shape DISTRICT after converting:', Y2.shape[0], Y2.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6d98fe8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape DAY_OF_WEEK after converting: 19782 7\n"
     ]
    }
   ],
   "source": [
    "# Convert feature DAY_OF_WEEK to Numerical features\n",
    "Day = data.loc[:, 'DAY_OF_WEEK']\n",
    "Day = Day.values.reshape(len(Day), 1)\n",
    "Y3 = pd.DataFrame(onehot_encoder.fit_transform(Day))\n",
    "print('Shape DAY_OF_WEEK after converting:', Y3.shape[0], Y3.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "00472289",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape STREET after converting: 19782 4292\n"
     ]
    }
   ],
   "source": [
    "# Convert feature STREET to Numerical features\n",
    "Street = data.loc[:, 'STREET']\n",
    "Street = Street.values.reshape(len(Street), 1)\n",
    "Y4 = pd.DataFrame(onehot_encoder.fit_transform(Street))\n",
    "print('Shape STREET after converting:', Y4.shape[0], Y4.shape[1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f87702b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Numerical Features\n",
    "Shooting = data.loc[:, 'SHOOTING']\n",
    "Year = data.loc[:, 'YEAR']\n",
    "Month = data.loc[:, 'MONTH']\n",
    "Hour = data.loc[:, 'HOUR']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5fa2cef9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Concat All transfered features and original numerical features\n",
    "All_Data = [Y1, Y2, Y3, Y4, Shooting, Year, Month, Hour]\n",
    "All_Data = pd.concat(All_Data, ignore_index=True, axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "78deaf69",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Considering 10 Components for Converting\n",
    "pca = PCA(n_components=10)\n",
    "New_x = pca.fit_transform(All_Data.values)\n",
    "np.save('After PCA.npy', New_x)\n",
    "\n",
    "pd.DataFrame(New_x).to_excel('After PCA.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0084a039",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variance Covered Ratio: [0.90416044 0.0158476  0.00333754 0.00322759 0.00313994 0.0030611\n",
      " 0.00304008 0.00288913 0.00279618 0.00277867]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print('Variance Covered Ratio:', pca.explained_variance_ratio_)\n",
    "\n",
    "plt.plot(pca.explained_variance_ratio_)\n",
    "plt.xlabel('number of components')\n",
    "plt.ylabel('cumulative explained variance')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "ax = sns.heatmap(pca.components_[:, :10],\n",
    "                 cmap='YlGnBu',\n",
    "                 yticklabels=[ \"PCA \"+str(x) for x in range(1,pca.n_components_+1)],\n",
    "                 xticklabels= list(All_Data.columns)[0:10],\n",
    "                 cbar_kws={\"orientation\": \"horizontal\"})\n",
    "ax.set_aspect(\"equal\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b9bc930",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
